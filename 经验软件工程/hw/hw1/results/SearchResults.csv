Item Title,URL,Àà±ð,,Systematic Reviews,1
Practical relevance of software engineering research: synthesizing the community¡¯s voice,http://link.springer.com/article/10.1007/s10664-020-09803-0,5,,Experiment,2
"The who, what, how of software engineering research: a socio-technical framework",http://link.springer.com/article/10.1007/s10664-020-09858-z,5,,Survey,3
How software engineering research aligns with design science: a review,http://link.springer.com/article/10.1007/s10664-020-09818-7,,,Case Studies,4
Preface to the empirical software engineering special issue on selected papers from RE¡¯19,http://link.springer.com/article/10.1007/s10664-020-09887-8,,,Ethnographies,5
Search. Review. Repeat? An empirical study of threats to replicating SLR searches,http://link.springer.com/article/10.1007/s10664-019-09763-0,,,Action Research,6
Foreword to the Special Issue in Empirical Software Engineering: Best Papers of REFSQ 2019,http://link.springer.com/article/10.1007/s10664-020-09839-2,,,Expert Opinions,7
An experimental scrutiny of visual design modelling: VCL up against UML+OCL,http://link.springer.com/article/10.1007/s10664-019-09784-9,,,,
A practical guide on conducting eye tracking studies in software engineering,http://link.springer.com/article/10.1007/s10664-020-09829-4,,,,
On (Mis)perceptions of testing effectiveness: an empirical study,http://link.springer.com/article/10.1007/s10664-020-09805-y,,,,
Why reinventing the wheels? An empirical study on library reuse and re-implementation,http://link.springer.com/article/10.1007/s10664-019-09771-0,,,,
Code and commit metrics of developer productivity: a study on team leaders perceptions,http://link.springer.com/article/10.1007/s10664-020-09820-z,,,,
Towards an evidence-based theoretical framework on factors influencing the software development productivity,http://link.springer.com/article/10.1007/s10664-020-09844-5,,,,
Standing on shoulders or feet? An extended study on the usage of the MSR data papers,http://link.springer.com/article/10.1007/s10664-020-09834-7,,,,
A tailored participatory action research for foss communities,http://link.springer.com/article/10.1007/s10664-020-09849-0,,,,
Empirical assessment of the effort needed to attack programs protected with client/server code splitting,http://link.springer.com/article/10.1007/s10664-019-09738-1,,,,
Formal methods in dependable systems engineering: a survey of professionals from Europe and North America,http://link.springer.com/article/10.1007/s10664-020-09836-5,,,,
Software engineering whispers: The effect of textual vs. graphical software design descriptions on software design communication,http://link.springer.com/article/10.1007/s10664-020-09835-6,,,,
An empirical assessment of baseline feature location techniques,http://link.springer.com/article/10.1007/s10664-019-09734-5,,,,
How does combinatorial testing perform in the real world: an empirical study,http://link.springer.com/article/10.1007/s10664-019-09799-2,,,,
The Teamwork Process Antecedents (TPA) questionnaire: developing and validating a comprehensive measure for assessing antecedents of teamwork process quality,http://link.springer.com/article/10.1007/s10664-020-09860-5,,,,
Building the perfect game _ an empirical study of game modifications,http://link.springer.com/article/10.1007/s10664-019-09783-w,,,,
Explicit programming strategies,http://link.springer.com/article/10.1007/s10664-020-09810-1,,,,
What should your run-time configuration framework do to help developers?,http://link.springer.com/article/10.1007/s10664-019-09790-x,,,,
Meta-analysis for families of experiments in software engineering: a systematic review and reproducibility and validity assessment,http://link.springer.com/article/10.1007/s10664-019-09747-0,,,,
What distinguishes great software engineers?,http://link.springer.com/article/10.1007/s10664-019-09773-y,,,,
An empirical study of the characteristics of popular Minecraft mods,http://link.springer.com/article/10.1007/s10664-020-09840-9,,,,
Characteristics of method extractions in Java: a large scale empirical study,http://link.springer.com/article/10.1007/s10664-020-09809-8,,,,
Using black-box performance models to detect performance regressions under varying workloads: an empirical study,http://link.springer.com/article/10.1007/s10664-020-09866-z,,,,
Testing machine learning based systems: a systematic mapping,http://link.springer.com/article/10.1007/s10664-020-09881-0,,,,
On the assessment of software defect prediction models via ROC curves,http://link.springer.com/article/10.1007/s10664-020-09861-4,,,,
The state of adoption and the challenges of systematic variability management in industry,http://link.springer.com/article/10.1007/s10664-019-09787-6,,,,
The ¡®as code¡¯ activities: development anti-patterns for infrastructure as code,http://link.springer.com/article/10.1007/s10664-020-09841-8,,,,
Mining understandable state machine models from embedded code,http://link.springer.com/article/10.1007/s10664-020-09865-0,,,,
Characterizing the transfer of program comprehension in onboarding: an information-push perspective,http://link.springer.com/article/10.1007/s10664-019-09741-6,,,,
Better software analytics via ¡°DUO¡±: Data mining algorithms using/used-by optimizers,http://link.springer.com/article/10.1007/s10664-020-09808-9,,,,
Measuring the accuracy of software vulnerability assessments: experiments with students and professionals,http://link.springer.com/article/10.1007/s10664-019-09797-4,,,,
On the impact of using trivial packages: an empirical case study on npm and PyPI,http://link.springer.com/article/10.1007/s10664-019-09792-9,,,,
RePOR: Mimicking humans on refactoring tasks. Are we there yet?,http://link.springer.com/article/10.1007/s10664-020-09826-7,,,,
The practitioners¡¯ point of view on the concept of technical debt and its causes and consequences: a design for a global family of industrial surveys and its first results from Brazil,http://link.springer.com/article/10.1007/s10664-020-09832-9,,,,
Data-driven software design with Constraint Oriented Multi-variate Bandit Optimization (COMBO),http://link.springer.com/article/10.1007/s10664-020-09856-1,,,,
Every build you break: developer-oriented assistance for build failure resolution,http://link.springer.com/article/10.1007/s10664-019-09765-y,,,,
"Publish or perish, but do not forget your software artifacts",http://link.springer.com/article/10.1007/s10664-020-09851-6,,,,
An empirical characterization of bad practices in continuous integration,http://link.springer.com/article/10.1007/s10664-019-09785-8,,,,
Using machine learning to assist with the selection of security controls during security assessment,http://link.springer.com/article/10.1007/s10664-020-09814-x,,,,
How bugs are born: a model to identify how bugs are introduced in software components,http://link.springer.com/article/10.1007/s10664-019-09781-y,,,,
Third-party libraries in mobile apps,http://link.springer.com/article/10.1007/s10664-019-09754-1,,,,
An empirical analysis of error propagation in critical software systems,http://link.springer.com/article/10.1007/s10664-020-09801-2,,,,
Automated issue assignment: results and insights from an industrial case,http://link.springer.com/article/10.1007/s10664-020-09846-3,,,,
Recognizing lines of code violating company-specific coding guidelines using machine learning,http://link.springer.com/article/10.1007/s10664-019-09769-8,,,,
MSRBot: Using bots to answer questions from software repositories,http://link.springer.com/article/10.1007/s10664-019-09788-5,,,,
Measuring the impact of lexical and structural inconsistencies on developers¡¯ cognitive load during bug localization,http://link.springer.com/article/10.1007/s10664-019-09751-4,,,,
Bounties on technical Q&A sites: a case study of Stack Overflow bounties,http://link.springer.com/article/10.1007/s10664-019-09744-3,,,,
A feature location approach for mapping application features extracted from crowd-based screencasts to source code,http://link.springer.com/article/10.1007/s10664-020-09874-z,,,,
Automated demarcation of requirements in textual specifications: a machine learning-based approach,http://link.springer.com/article/10.1007/s10664-020-09864-1,,,,
ALFAA: Active Learning Fingerprint based Anti-Aliasing for correcting developer identity errors in version control systems,http://link.springer.com/article/10.1007/s10664-019-09786-7,,,,
Meshing agile and plan-driven development in safety-critical software: a case study,http://link.springer.com/article/10.1007/s10664-020-09804-z,,,,
An empirical investigation on the relationship between design and architecture smells,http://link.springer.com/article/10.1007/s10664-020-09847-2,,,,
How developers engage with static analysis tools in different contexts,http://link.springer.com/article/10.1007/s10664-019-09750-5,,,,
On the need of preserving order of data when validating within-project defect classifiers,http://link.springer.com/article/10.1007/s10664-020-09868-x,,,,
A comprehensive study on software aging across android versions and vendors,http://link.springer.com/article/10.1007/s10664-020-09838-3,,,,
SIEVE: Helping developers sift wheat from chaff via cross-platform analysis,http://link.springer.com/article/10.1007/s10664-019-09775-w,,,,
How different are different diff algorithms in Git?,http://link.springer.com/article/10.1007/s10664-019-09772-z,,,,
A gamification solution for improving Scrum adoption,http://link.springer.com/article/10.1007/s10664-020-09816-9,,,,
Investigating types and survivability of performance bugs in mobile apps,http://link.springer.com/article/10.1007/s10664-019-09795-6,,,,
Do code review measures explain the incidence of post-release defects?,http://link.springer.com/article/10.1007/s10664-020-09837-4,2,,,
A longitudinal study of static analysis warning evolution and the effects of PMD on software quality in Apache open source projects,http://link.springer.com/article/10.1007/s10664-020-09880-1,4,,,
You broke my code: understanding the motivations for breaking changes in APIs,http://link.springer.com/article/10.1007/s10664-019-09756-z,2,,,
CAPS: a supervised technique for classifying Stack Overflow posts concerning API issues,http://link.springer.com/article/10.1007/s10664-019-09743-4,6,£¿,,
Pandemic programming,http://link.springer.com/article/10.1007/s10664-020-09875-y,3,*,,
The significance of bug report elements,http://link.springer.com/article/10.1007/s10664-020-09882-z,6,,,
Going deeper with optimal software products selection using many-objective optimization and satisfiability solvers,http://link.springer.com/article/10.1007/s10664-019-09761-2,2,,,
How agile teams make self-assignment work: a grounded theory study,http://link.springer.com/article/10.1007/s10664-020-09876-x,5,*,,
An Empirical Investigation of Relevant Changes and Automation Needs in Modern Code Review,http://link.springer.com/article/10.1007/s10664-020-09870-3,3,£¿,,
Code cloning in smart contracts: a case study on verified contracts from the Ethereum blockchain platform,http://link.springer.com/article/10.1007/s10664-020-09852-5,4,,,
Guiding log revisions by learning from software evolution history,http://link.springer.com/article/10.1007/s10664-019-09757-y,4,,,
Improving change prediction models with code smell-related information,http://link.springer.com/article/10.1007/s10664-019-09739-0,2,,,
Ammonia: an approach for deriving project-specific bug patterns,http://link.springer.com/article/10.1007/s10664-020-09807-w,4,£¿,,
How does code readability change during software evolution?,http://link.springer.com/article/10.1007/s10664-020-09886-9,4,,,
Wait for it: identifying ¡°On-Hold¡± self-admitted technical debt,http://link.springer.com/article/10.1007/s10664-020-09854-3,2,£¿,,
Characterizing the evolution of statically-detectable performance issues of Android apps,http://link.springer.com/article/10.1007/s10664-019-09798-3,4,*,,
Memory and resource leak defects and their repairs in Java projects,http://link.springer.com/article/10.1007/s10664-019-09731-8,4,,,
Guest editorial: Mining software repositories 2018,http://link.springer.com/article/10.1007/s10664-020-09817-8,1,*,,
Evaluating the agreement among technical debt measurement tools: building an empirical benchmark of technical debt liabilities,http://link.springer.com/article/10.1007/s10664-020-09869-w,4,,,
Log4Perf: suggesting and updating logging locations for web-based systems¡¯ performance monitoring,http://link.springer.com/article/10.1007/s10664-019-09748-z,4,,,
Deriving a usage-independent software quality metric,http://link.springer.com/article/10.1007/s10664-019-09791-w,3,,,
API compatibility issues in Android: Causes and effectiveness of data-driven detection techniques,http://link.springer.com/article/10.1007/s10664-020-09877-w,2,,,
?orba: crowdsourcing to obtain requirements from regulations and breaches,http://link.springer.com/article/10.1007/s10664-019-09753-2,3,,,
Preface to the special issue on program comprehension,http://link.springer.com/article/10.1007/s10664-020-09806-x,1,,,
On the relationship between bug reports and queries for text retrieval-based bug localization,http://link.springer.com/article/10.1007/s10664-020-09823-w,2,,,
An empirical investigation into merge conflicts and their effect on software quality,http://link.springer.com/article/10.1007/s10664-019-09735-4,4,,,
An empirical investigation of performance overhead in cross-platform mobile development frameworks,http://link.springer.com/article/10.1007/s10664-020-09827-6,2,,,
On the fulfillment of coordination requirements in open-source software projects: An exploratory study,http://link.springer.com/article/10.1007/s10664-020-09833-8,4,,,
CDA: Characterising Deprecated Android APIs,http://link.springer.com/article/10.1007/s10664-019-09764-z,2,,,
Predicting software defect type using concept-based classification,http://link.springer.com/article/10.1007/s10664-019-09779-6,7,*,,
Systematic mapping study on domain-specific language development tools,http://link.springer.com/article/10.1007/s10664-020-09872-1,3,,,
Learning actionable analytics from multiple software projects,http://link.springer.com/article/10.1007/s10664-020-09843-6,2,,,
The impact of automated feature selection techniques on the interpretation of defect models,http://link.springer.com/article/10.1007/s10664-020-09848-1,3,,,
Developer recommendation for Topcoder through a meta-learning based policy model,http://link.springer.com/article/10.1007/s10664-019-09755-0,2,,,
"Guest editorial: special section on software analysis, evolution, and reengineering",http://link.springer.com/article/10.1007/s10664-020-09812-z,1,,,
A benchmark-based evaluation of search-based crash reproduction,http://link.springer.com/article/10.1007/s10664-019-09762-1,2,,,
Software provenance tracking at the scale of public source code,http://link.springer.com/article/10.1007/s10664-020-09828-5,3,,,
"What to share, when, and where: balancing the objectives and complexities of open source software contributions",http://link.springer.com/article/10.1007/s10664-020-09855-2,4,,,
Deep code comment generation with hybrid lexical and syntactical information,http://link.springer.com/article/10.1007/s10664-019-09730-9,2,,,
On the feasibility of automated prediction of bug and non-bug issues,http://link.springer.com/article/10.1007/s10664-020-09885-w,2,,,
On the time-based conclusion stability of cross-project defect prediction models,http://link.springer.com/article/10.1007/s10664-020-09878-9,3,,,
A longitudinal study of popular ad libraries in the Google Play Store,http://link.springer.com/article/10.1007/s10664-019-09766-x,4,,,
FixMiner: Mining relevant fix patterns for automated program repair,http://link.springer.com/article/10.1007/s10664-019-09780-z,2,,,
The virtual lands of Oz: testing an agribot in simulation,http://link.springer.com/article/10.1007/s10664-020-09800-3,4,,,
Boosting crash-inducing change localization with rank-performance-based feature subset selection,http://link.springer.com/article/10.1007/s10664-020-09802-1,2,,,
What am I testing and where? Comparing testing procedures based on lightweight requirements annotations,http://link.springer.com/article/10.1007/s10664-020-09815-w,2,,,
Information correspondence between types of documentation for APIs,http://link.springer.com/article/10.1007/s10664-020-09857-0,3,,,
Feature requests-based recommendation of software refactorings,http://link.springer.com/article/10.1007/s10664-020-09871-2,2,,,
PHANTOM: Curating GitHub for engineered software projects using time-series clustering,http://link.springer.com/article/10.1007/s10664-020-09825-8,6,,,
CGT-FL: using cooperative game theory to effective fault localization in presence of coincidental correctness,http://link.springer.com/article/10.1007/s10664-020-09859-y,2,,,
Are free Android app security analysis tools effective in detecting known vulnerabilities?,http://link.springer.com/article/10.1007/s10664-019-09749-y,3,,,
The impact of context metrics on just-in-time defect prediction,http://link.springer.com/article/10.1007/s10664-019-09736-3,4,,,
Interaction-based creation and maintenance of continuously usable trace links between requirements and source code,http://link.springer.com/article/10.1007/s10664-020-09831-w,2,,,
A systemic framework for crowdsourced test report quality assessment,http://link.springer.com/article/10.1007/s10664-019-09793-8,6,,,
A study of the performance of general compressors on log files,http://link.springer.com/article/10.1007/s10664-020-09822-x,3,,,
Automating system test case classification and prioritization for use case-driven testing in product lines,http://link.springer.com/article/10.1007/s10664-020-09853-4,6,,,
An exploratory study of smart contracts in the Ethereum blockchain platform,http://link.springer.com/article/10.1007/s10664-019-09796-5,4,,,
CROKAGE: effective solution recommendation for programming tasks by leveraging crowd knowledge,http://link.springer.com/article/10.1007/s10664-020-09863-2,6,*,,
What kind of questions do developers ask on Stack Overflow? A comparison of automated approaches to classify posts into question categories,http://link.springer.com/article/10.1007/s10664-019-09758-x,2,,,
BarrierFinder: recognizing ad hoc barriers,http://link.springer.com/article/10.1007/s10664-020-09862-3,2,,,
Security analysis of permission re-delegation vulnerabilities in Android apps,http://link.springer.com/article/10.1007/s10664-020-09879-8,2,,,
An approach and benchmark to detect behavioral changes of commits in continuous integration,http://link.springer.com/article/10.1007/s10664-019-09794-7,2,,,
Automated test reuse for highly configurable software,http://link.springer.com/article/10.1007/s10664-020-09884-x,2,,,